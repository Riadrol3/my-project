name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  lint_frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

  test_frontend:
    name: Build and Test Frontend (React Native)
    runs-on: ubuntu-latest
    needs: lint_frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Build production assets
        run: |
          cd frontend
          npm run build

  lint_backend:
    name: Lint Backend Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run Pylint
        run: |
          cd backend
          pylint src/

      - name: Run Security Analysis
        run: |
          cd backend
          bandit -r src/

  test_backend:
    name: Build and Test Backend (Python)
    runs-on: ubuntu-latest
    needs: lint_backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        env:
         PYTHONPATH: "${{ github.workspace }}/backend"
        run: |
         cd backend
         pytest --junitxml=test-results.xml

      - name: Generate test coverage report
        run: |
          cd backend
          pytest --cov=src > coverage.txt

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.txt

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: backend/test-results.xml

  test_ml:
    name: Build and Test Machine Learning Module
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install ML dependencies
        run: |
          cd ml_model
          pip install -r requirements.txt

      - name: Run ML model tests
        run: |
          cd ml_model
          pytest --junitxml=test-results.xml

      - name: Lint ML Code
        run: |
          cd ml_model
          flake8

      - name: Generate test coverage report
        run: |
          cd ml_model
          pytest --cov=. > coverage.txt

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: ml-coverage
          path: ml_model/coverage.txt

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: ml-test-results
          path: ml_model/test-results.xml

  e2e_tests:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test_frontend, test_backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Cypress
        run: |
          npm install -g cypress

      - name: Run E2E Tests
        run: |
          cd e2e-tests
          cypress run

  migrate_database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: test_backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          cd backend
          alembic upgrade head

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test_frontend, test_backend, test_ml, migrate_database]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build -t yourusername/yourapp-frontend:latest ./frontend
          docker build -t yourusername/yourapp-backend:latest ./backend
          docker build -t yourusername/yourapp-ml:latest ./ml_model

      - name: Push Docker images
        run: |
          docker push yourusername/yourapp-frontend:latest
          docker push yourusername/yourapp-backend:latest
          docker push yourusername/yourapp-ml:latest

      - name: Scan Docker Images for Vulnerabilities
        uses: aquasecurity/trivy-action@v0.8.0
        with:
          image-ref: yourusername/yourapp-backend:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy using Docker Compose
        run: |
          docker-compose -f docker-compose.prod.yml up -d

      - name: Validate deployment
        run: |
          curl -f http://your-production-url/health || exit 1

  notify:
    name: Notify on Build Status
    runs-on: ubuntu-latest
    steps:
      - name: Notify Success or Failure
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          text: "Build status: ${{ job.status }} for ${{ github.ref_name }}"
